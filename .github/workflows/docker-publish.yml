name: Build and Publish Docker image to GHCR

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version string to tag Docker image with when manually dispatched (e.g., 0.9.2)"
        required: false
        default: "0.0.0-dev"
  workflow_call:
    inputs:
      version:
        description: "Version string to tag Docker image with when called from another workflow"
        type: string
        required: false
        default: "0.0.0-dev"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up emulation for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Convert repository owner to lowercase (required for GHCR image names)
      - name: Set lowercase repository owner
        id: repo_owner
        run: echo "lowercase=$(echo ${GITHUB_REPOSITORY_OWNER} | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      # Determine release version for tagging
      - name: Extract release version
        id: vars
        run: |
          TAG="${GITHUB_REF#refs/tags/v}"
          if [[ "$TAG" != "$GITHUB_REF" && "$TAG" != "" ]]; then
            echo "version=$TAG" >> "$GITHUB_OUTPUT"
          else
            echo "version=${{ github.event.inputs.version }}" >> "$GITHUB_OUTPUT"
          fi

      # Log in to GitHub Container Registry using the auto-generated token
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Derive image metadata (tags & labels)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.repo_owner.outputs.lowercase }}/wireport
          tags: |
            type=semver,pattern={{version}},value=${{ steps.vars.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.vars.outputs.version }}
            type=semver,pattern={{major}},value=${{ steps.vars.outputs.version }}

      # Build and push the image defined in wireport/Dockerfile
      - name: Build & push (GHA + registry cache)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=wireport
            type=registry,ref=ghcr.io/${{ steps.repo_owner.outputs.lowercase }}/wireport-buildcache:cache
          cache-to: |
            type=gha,mode=max,scope=wireport
            type=registry,ref=ghcr.io/${{ steps.repo_owner.outputs.lowercase }}/wireport-buildcache:cache,mode=max,compression=zstd
          build-args: |
            BUILDKIT_INLINE_CACHE=1
